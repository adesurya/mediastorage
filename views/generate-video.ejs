<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Generate Video - SIJAGO+ AI</title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    .grid-layout {
      display: grid;
      grid-template-columns: 1fr 400px;
      gap: 2rem;
      margin-bottom: 2rem;
    }

    .clips-grid {
      display: grid;
      gap: 1rem;
      max-height: 600px;
      overflow-y: auto;
      padding-right: 0.5rem;
    }

    .clips-grid::-webkit-scrollbar {
      width: 6px;
    }

    .clips-grid::-webkit-scrollbar-track {
      background: var(--gray-100);
      border-radius: 10px;
    }

    .clips-grid::-webkit-scrollbar-thumb {
      background: var(--gray-400);
      border-radius: 10px;
    }

    .clip-item {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      background: var(--gray-50);
      border-radius: var(--radius);
      border: 2px solid transparent;
      transition: var(--transition);
    }

    .clip-item.selected {
      border-color: var(--primary);
      background: rgba(99, 102, 241, 0.05);
    }

    .clip-number {
      min-width: 2.5rem;
      height: 2.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
      color: var(--white);
      border-radius: 50%;
      font-weight: 700;
      font-size: 0.875rem;
    }

    .clip-select {
      flex: 1;
      min-width: 0;
    }

    .clip-preview {
      width: 60px;
      height: 34px;
      background: var(--gray-200);
      border-radius: var(--radius-sm);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.25rem;
      color: var(--gray-500);
    }

    /* Preview Video Section Styles */
    .preview-section {
      margin-top: 1.5rem;
      padding: 1.5rem;
      background: var(--gray-50);
      border-radius: var(--radius);
      border: 2px dashed var(--gray-300);
      transition: var(--transition);
    }

    .preview-section.active {
      border-color: var(--primary);
      background: rgba(99, 102, 241, 0.05);
    }

    .preview-header {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 1rem;
      font-size: 0.875rem;
      font-weight: 600;
      color: var(--gray-700);
    }

    .preview-video-container {
      position: relative;
      width: 100%;
      background: #000;
      border-radius: var(--radius);
      overflow: hidden;
      box-shadow: var(--shadow-md);
    }

    .preview-video {
      width: 100%;
      height: auto;
      display: block;
      max-height: 250px;
      object-fit: contain;
    }

    .preview-placeholder {
      width: 100%;
      height: 200px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background: var(--gray-200);
      border-radius: var(--radius);
      color: var(--gray-500);
    }

    .preview-placeholder-icon {
      font-size: 3rem;
      margin-bottom: 0.5rem;
      opacity: 0.5;
    }

    .preview-placeholder-text {
      font-size: 0.875rem;
    }

    .preview-loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      display: none;
    }

    .preview-loading.active {
      display: block;
    }

    .preview-info {
      margin-top: 0.75rem;
      padding: 0.75rem;
      background: var(--white);
      border-radius: var(--radius-sm);
      font-size: 0.8125rem;
      color: var(--gray-600);
    }

    .status-card {
      background: var(--white);
      border-radius: var(--radius-lg);
      padding: 2rem;
      box-shadow: var(--shadow);
      display: none;
    }

    .status-card.active {
      display: block;
    }

    .status-header {
      text-align: center;
      margin-bottom: 2rem;
    }

    .status-icon {
      font-size: 4rem;
      margin-bottom: 1rem;
    }

    .status-header h3 {
      color: var(--gray-900);
      font-size: 1.5rem;
      margin-bottom: 0.5rem;
    }

    .status-header p {
      color: var(--gray-500);
      font-size: 0.9375rem;
    }

    .progress-bar {
      width: 100%;
      height: 6px;
      background: var(--gray-200);
      border-radius: 10px;
      overflow: hidden;
      margin-bottom: 1.5rem;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, var(--primary) 0%, var(--secondary) 100%);
      transition: width 0.5s ease;
      border-radius: 10px;
    }

    .status-details {
      background: var(--gray-50);
      padding: 1.5rem;
      border-radius: var(--radius);
      margin-bottom: 1.5rem;
    }

    .status-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem 0;
      border-bottom: 1px solid var(--gray-200);
    }

    .status-item:last-child {
      border-bottom: none;
    }

    .status-label {
      color: var(--gray-600);
      font-weight: 500;
      font-size: 0.875rem;
    }

    .status-value {
      color: var(--gray-900);
      font-weight: 600;
    }

    .video-preview {
      width: 100%;
      border-radius: var(--radius);
      margin-bottom: 1.5rem;
      box-shadow: var(--shadow-md);
    }

    .empty-clips {
      text-align: center;
      padding: 3rem 2rem;
      color: var(--gray-400);
    }

    @media (max-width: 1024px) {
      .grid-layout {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <%- include('partials/navbar', { user: user, currentPage: 'video' }) %>

  <div class="container">
    <div class="page-header">
      <h1 class="page-title">Generate Video</h1>
      <p class="page-subtitle">Create stunning videos from your uploaded clips</p>
    </div>

    <div class="alert alert-warning">
      <span class="alert-icon">‚ö†Ô∏è</span>
      <div class="alert-content">
        <div class="alert-title">Important Notice</div>
        Generated videos will be stored for only 24 hours. Please download your video immediately after generation.
      </div>
    </div>

    <div id="generateForm" class="grid-layout">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">
            <span>üé®</span>
            Select Video Clips (12 Required)
          </h2>
          <select id="categoryFilter" class="form-select" style="width: 200px;" onchange="filterVideosByCategory()">
            <option value="">All Categories</option>
            <% const uniqueCategories = [...new Set(videos.map(v => v.category_name).filter(Boolean))]; %>
            <% uniqueCategories.forEach(catName => { %>
              <option value="<%= catName %>"><%= catName %></option>
            <% }); %>
          </select>
        </div>

        <% if (videos.length > 0) { %>
          <div class="clips-grid" id="clipsContainer">
            <% for(let i = 1; i <= 12; i++) { %>
              <div class="clip-item" id="clip-item-<%= i %>">
                <div class="clip-number"><%= i %></div>
                <div class="clip-select">
                  <select id="clip<%= i %>" name="clip<%= i %>" class="form-select clip-selector" required>
                    <option value="">Select video for clip <%= i %></option>
                    <% videos.forEach(video => { %>
                      <option value="<%= video.public_url %>" data-category="<%= video.category_name || '' %>">
                        <%= video.category_name ? '[' + video.category_name + '] ' : '' %><%= video.original_name %>
                      </option>
                    <% }); %>
                  </select>
                </div>
                <div class="clip-preview">üé•</div>
              </div>
            <% } %>
          </div>
        <% } else { %>
          <div class="empty-clips">
            <div style="font-size: 4rem; margin-bottom: 1rem;">üé•</div>
            <p style="font-size: 1.125rem; margin-bottom: 0.5rem; color: var(--gray-600);">No video files available</p>
            <p style="font-size: 0.875rem;">Please upload video files first before generating.</p>
            <a href="/media" class="btn btn-primary" style="margin-top: 1rem;">
              <span>üì§</span>
              <span>Upload Videos</span>
            </a>
          </div>
        <% } %>
      </div>

      <div>
        <div class="card">
          <div class="card-header">
            <h2 class="card-title">
              <span>‚öôÔ∏è</span>
              Video Settings
            </h2>
          </div>
          
          <form id="videoForm">
            <div class="form-group">
              <label class="form-label" for="styleSelect">Video Style</label>
              <select id="styleSelect" name="style" class="form-select" required>
                <option value="">Choose a style</option>
                <% styles.forEach((style, index) => { %>
                  <option value="<%= style %>">Style <%= index + 1 %></option>
                <% }); %>
              </select>
            </div>

            <!-- Preview Video Section -->
            <div class="preview-section" id="previewSection">
              <div class="preview-header">
                <span>üëÅÔ∏è</span>
                <span>Style Preview</span>
              </div>
              <div class="preview-video-container">
                <div class="preview-placeholder" id="previewPlaceholder">
                  <div class="preview-placeholder-icon">üé¨</div>
                  <div class="preview-placeholder-text">Select a style to preview</div>
                </div>
                <video 
                  id="previewVideo" 
                  class="preview-video" 
                  controls 
                  preload="metadata"
                  style="display: none;"
                >
                  Your browser does not support video playback.
                </video>
                <div class="preview-loading" id="previewLoading">
                  <div class="spinner"></div>
                </div>
              </div>
              <div class="preview-info" id="previewInfo" style="display: none;">
                <strong>Preview:</strong> This is how your final video layout will look with your selected clips.
              </div>
            </div>

            <button type="submit" class="btn btn-primary btn-lg" id="generateBtn" style="width: 100%; margin-top: 1rem;">
              <span>üé¨</span>
              <span>Generate Video</span>
            </button>
          </form>
        </div>

        <div class="card" style="margin-top: 1rem; background: var(--gray-50);">
          <h4 style="font-size: 0.875rem; font-weight: 600; color: var(--gray-700); margin-bottom: 0.75rem;">Instructions</h4>
          <ul style="margin-left: 1.25rem; font-size: 0.8125rem; color: var(--gray-600); line-height: 1.6;">
            <li style="margin-bottom: 0.5rem;">Select exactly 12 video clips from your library</li>
            <li style="margin-bottom: 0.5rem;">Choose a video style template</li>
            <li style="margin-bottom: 0.5rem;">Preview the style before generating</li>
            <li style="margin-bottom: 0.5rem;">Click Generate Video to start rendering</li>
            <li>Download the video within 24 hours</li>
          </ul>
        </div>
      </div>
    </div>

    <div id="statusCard" class="status-card">
      <div class="status-header">
        <div id="statusIcon" class="status-icon">‚è≥</div>
        <h3 id="statusTitle">Processing Your Video</h3>
        <p id="statusMessage">Please wait while we generate your video...</p>
      </div>

      <div id="progressSection">
        <div class="progress-bar">
          <div class="progress-fill" id="progressFill" style="width: 0%"></div>
        </div>
      </div>

      <div class="status-details" id="statusDetails">
        <div class="status-item">
          <span class="status-label">Render ID</span>
          <span class="status-value" id="renderId">-</span>
        </div>
        <div class="status-item">
          <span class="status-label">Status</span>
          <span class="status-value">
            <span class="badge badge-warning" id="statusBadge">queued</span>
          </span>
        </div>
        <div class="status-item">
          <span class="status-label">Duration</span>
          <span class="status-value" id="duration">-</span>
        </div>
      </div>

      <div id="videoPreviewSection" style="display: none;">
        <video id="videoPreview" class="video-preview" controls></video>
        <a id="downloadBtn" class="btn btn-success btn-lg" download style="width: 100%; text-decoration: none;">
          <span>üì•</span>
          <span>Download Video</span>
        </a>
      </div>

      <button class="btn btn-primary btn-lg" onclick="resetForm()" style="width: 100%; margin-top: 1rem;">
        <span>üé¨</span>
        <span>Generate Another Video</span>
      </button>
    </div>
  </div>

  <script>
    let checkInterval;
    let currentRenderId;
    
    // Video preview cache
    const videoCache = {};
    const STYLE_PREVIEWS = {
      'style1': '/previews/style1-preview.mp4',
      'style2': '/previews/style2-preview.mp4',
      'style3': '/previews/style3-preview.mp4'
    };

    // Preload videos on page load for better performance
    function preloadVideos() {
      Object.keys(STYLE_PREVIEWS).forEach(styleKey => {
        const video = document.createElement('video');
        video.preload = 'metadata';
        video.src = STYLE_PREVIEWS[styleKey];
        videoCache[styleKey] = video;
      });
    }

    // Initialize preloading
    window.addEventListener('load', preloadVideos);

    // Style selector change handler
    const styleSelect = document.getElementById('styleSelect');
    const previewSection = document.getElementById('previewSection');
    const previewVideo = document.getElementById('previewVideo');
    const previewPlaceholder = document.getElementById('previewPlaceholder');
    const previewLoading = document.getElementById('previewLoading');
    const previewInfo = document.getElementById('previewInfo');

    styleSelect.addEventListener('change', function() {
      const selectedStyle = this.value;
      
      if (selectedStyle && STYLE_PREVIEWS[selectedStyle]) {
        showVideoPreview(selectedStyle);
      } else {
        hideVideoPreview();
      }
    });

    function showVideoPreview(styleKey) {
      previewSection.classList.add('active');
      previewPlaceholder.style.display = 'none';
      previewLoading.classList.add('active');
      
      const videoSrc = STYLE_PREVIEWS[styleKey];
      
      // Use cached video if available
      if (videoCache[styleKey] && videoCache[styleKey].readyState >= 2) {
        loadPreviewVideo(videoSrc);
      } else {
        // Load video with loading indicator
        previewVideo.src = videoSrc;
        previewVideo.load();
        
        previewVideo.addEventListener('loadedmetadata', function onLoad() {
          loadPreviewVideo(videoSrc);
          previewVideo.removeEventListener('loadedmetadata', onLoad);
        }, { once: true });
        
        previewVideo.addEventListener('error', function onError() {
          handlePreviewError();
          previewVideo.removeEventListener('error', onError);
        }, { once: true });
      }
    }

    function loadPreviewVideo(src) {
      previewVideo.src = src;
      previewVideo.style.display = 'block';
      previewLoading.classList.remove('active');
      previewInfo.style.display = 'block';
    }

    function hideVideoPreview() {
      previewSection.classList.remove('active');
      previewVideo.style.display = 'none';
      previewVideo.pause();
      previewVideo.currentTime = 0;
      previewPlaceholder.style.display = 'flex';
      previewInfo.style.display = 'none';
      previewLoading.classList.remove('active');
    }

    function handlePreviewError() {
      previewLoading.classList.remove('active');
      previewPlaceholder.innerHTML = `
        <div class="preview-placeholder-icon">‚ùå</div>
        <div class="preview-placeholder-text">Preview not available</div>
      `;
      previewPlaceholder.style.display = 'flex';
    }

    // Highlight selected clips
    for(let i = 1; i <= 12; i++) {
      const selectElement = document.getElementById(`clip${i}`);
      if (selectElement) {
        selectElement.addEventListener('change', function() {
          const item = document.getElementById(`clip-item-${i}`);
          if(this.value) {
            item.classList.add('selected');
          } else {
            item.classList.remove('selected');
          }
        });
      }
    }

    const videoForm = document.getElementById('videoForm');
    if (videoForm) {
      videoForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const styleId = document.getElementById('styleSelect').value;
        const clips = [];
        
        // Collect all clip URLs
        for(let i = 1; i <= 12; i++) {
          const clipUrl = document.getElementById(`clip${i}`)?.value;
          if(!clipUrl) {
            alert(`Please select a video for clip ${i}`);
            return;
          }
          clips.push(clipUrl);
        }

        // Disable button
        const generateBtn = document.getElementById('generateBtn');
        generateBtn.disabled = true;
        generateBtn.innerHTML = '<span class="spinner" style="width: 1.25rem; height: 1.25rem; border-width: 2px; margin: 0;"></span><span>Processing...</span>';

        try {
          const response = await fetch('/video/api/render', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              styleId: styleId,
              clips: clips
            })
          });

          const result = await response.json();

          if(result.success) {
            currentRenderId = result.data.renderId;
            showStatusCard(currentRenderId);
            startStatusCheck(currentRenderId);
          } else {
            alert(result.message || 'Failed to generate video');
            generateBtn.disabled = false;
            generateBtn.innerHTML = '<span>üé¨</span><span>Generate Video</span>';
          }
        } catch(error) {
          console.error('Error:', error);
          alert('Failed to generate video');
          generateBtn.disabled = false;
          generateBtn.innerHTML = '<span>üé¨</span><span>Generate Video</span>';
        }
      });
    }

    function showStatusCard(renderId) {
      document.getElementById('generateForm').style.display = 'none';
      document.getElementById('statusCard').classList.add('active');
      document.getElementById('renderId').textContent = renderId;
    }

    function startStatusCheck(renderId) {
      checkInterval = setInterval(() => {
        checkRenderStatus(renderId);
      }, 3000);
      
      // Initial check
      checkRenderStatus(renderId);
    }

    async function checkRenderStatus(renderId) {
      try {
        const response = await fetch(`/video/api/status/${renderId}`);
        const result = await response.json();

        if(result.success) {
          updateStatusUI(result.data);
        }
      } catch(error) {
        console.error('Error checking status:', error);
      }
    }

    function updateStatusUI(data) {
      const status = data.status;
      const statusBadge = document.getElementById('statusBadge');
      const statusIcon = document.getElementById('statusIcon');
      const statusTitle = document.getElementById('statusTitle');
      const statusMessage = document.getElementById('statusMessage');
      const progressFill = document.getElementById('progressFill');
      const duration = document.getElementById('duration');

      // Update badge
      statusBadge.textContent = status.toUpperCase();
      statusBadge.className = 'badge';

      // Update duration
      if(data.duration) {
        duration.textContent = data.duration + 's';
      }

      // Update based on status
      if(status === 'queued') {
        statusBadge.classList.add('badge-warning');
        statusIcon.textContent = '‚è≥';
        statusTitle.textContent = 'Video Queued';
        statusMessage.textContent = 'Your video is in the queue...';
        progressFill.style.width = '25%';
      } else if(status === 'rendering') {
        statusBadge.classList.add('badge-primary');
        statusIcon.textContent = 'üé¨';
        statusTitle.textContent = 'Rendering Video';
        statusMessage.textContent = 'Your video is being rendered...';
        progressFill.style.width = '75%';
      } else if(status === 'done') {
        clearInterval(checkInterval);
        statusBadge.classList.add('badge-success');
        statusIcon.textContent = '‚úÖ';
        statusTitle.textContent = 'Video Ready!';
        statusMessage.textContent = 'Your video has been generated successfully!';
        progressFill.style.width = '100%';
        
        // Show video preview
        if(data.url) {
          document.getElementById('progressSection').style.display = 'none';
          document.getElementById('videoPreviewSection').style.display = 'block';
          document.getElementById('videoPreview').src = data.url;
          document.getElementById('downloadBtn').href = data.url;
        }
      } else if(status === 'failed') {
        clearInterval(checkInterval);
        statusBadge.classList.add('badge-danger');
        statusIcon.textContent = '‚ùå';
        statusTitle.textContent = 'Rendering Failed';
        statusMessage.textContent = data.error || 'There was an error generating your video.';
        progressFill.style.width = '100%';
        progressFill.style.background = 'var(--danger)';
      }
    }

    function resetForm() {
      clearInterval(checkInterval);
      document.getElementById('statusCard').classList.remove('active');
      document.getElementById('generateForm').style.display = 'grid';
      
      const videoForm = document.getElementById('videoForm');
      if (videoForm) videoForm.reset();
      
      document.getElementById('progressSection').style.display = 'block';
      document.getElementById('videoPreviewSection').style.display = 'none';
      document.getElementById('progressFill').style.width = '0%';
      document.getElementById('progressFill').style.background = 'linear-gradient(90deg, var(--primary) 0%, var(--secondary) 100%)';
      
      const generateBtn = document.getElementById('generateBtn');
      generateBtn.disabled = false;
      generateBtn.innerHTML = '<span>üé¨</span><span>Generate Video</span>';
      
      // Remove all selected classes
      for(let i = 1; i <= 12; i++) {
        const item = document.getElementById(`clip-item-${i}`);
        if (item) item.classList.remove('selected');
      }
      
      // Reset preview
      hideVideoPreview();
    }
  </script>
</body>
</html>