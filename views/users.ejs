<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Management</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f5f5f5;
    }
    .navbar {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 15px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .navbar h1 {
      font-size: 24px;
    }
    .navbar-right {
      display: flex;
      gap: 20px;
      align-items: center;
    }
    .navbar a {
      color: white;
      text-decoration: none;
      padding: 8px 15px;
      border-radius: 5px;
      transition: background 0.3s;
    }
    .navbar a:hover {
      background: rgba(255,255,255,0.2);
    }
    .container {
      max-width: 1200px;
      margin: 30px auto;
      padding: 0 20px;
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
    }
    .header h2 {
      color: #333;
    }
    .btn-primary {
      padding: 10px 20px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: 600;
      text-decoration: none;
      display: inline-block;
    }
    .btn-primary:hover {
      transform: translateY(-2px);
    }
    table {
      width: 100%;
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    thead {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
    th, td {
      padding: 15px;
      text-align: left;
    }
    tbody tr:hover {
      background: #f5f5f5;
    }
    .badge {
      padding: 5px 10px;
      border-radius: 15px;
      font-size: 12px;
      font-weight: bold;
    }
    .badge-admin {
      background: #ff6b6b;
      color: white;
    }
    .badge-user {
      background: #4ecdc4;
      color: white;
    }
    .actions {
      display: flex;
      gap: 10px;
    }
    .btn-edit {
      padding: 5px 15px;
      background: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 12px;
    }
    .btn-delete {
      padding: 5px 15px;
      background: #f44336;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 12px;
    }
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      z-index: 1000;
      justify-content: center;
      align-items: center;
    }
    .modal.active {
      display: flex;
    }
    .modal-content {
      background: white;
      padding: 30px;
      border-radius: 10px;
      width: 90%;
      max-width: 500px;
      max-height: 90vh;
      overflow-y: auto;
    }
    .modal-content h2 {
      margin-bottom: 20px;
      color: #333;
    }
    .form-group {
      margin-bottom: 20px;
    }
    .form-group label {
      display: block;
      margin-bottom: 5px;
      color: #555;
      font-weight: 500;
    }
    .form-group input,
    .form-group select {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 14px;
    }
    .form-actions {
      display: flex;
      gap: 10px;
      justify-content: flex-end;
    }
    .btn-cancel {
      padding: 10px 20px;
      background: #999;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    .message {
      padding: 15px;
      border-radius: 5px;
      margin-bottom: 20px;
      text-align: center;
    }
    .success {
      background: #d4edda;
      color: #155724;
    }
    .error {
      background: #f8d7da;
      color: #721c24;
    }
  </style>
</head>
<body>
  <div class="navbar">
    <h1>üë• User Management</h1>
    <div class="navbar-right">
      <span>Welcome, <%= user.username %> (<%= user.role %>)</span>
      <a href="/media">üìÅ Media</a>
      <a href="/auth/logout">üö™ Logout</a>
    </div>
  </div>

  <div class="container">
    <div class="header">
      <h2>All Users</h2>
      <button class="btn-primary" onclick="openCreateModal()">‚ûï Add New User</button>
    </div>

    <div id="message"></div>

    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Username</th>
          <th>Email</th>
          <th>Role</th>
          <th>Created At</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% users.forEach(u => { %>
          <tr>
            <td><%= u.id %></td>
            <td><%= u.username %></td>
            <td><%= u.email %></td>
            <td>
              <span class="badge badge-<%= u.role %>"><%= u.role.toUpperCase() %></span>
            </td>
            <td><%= new Date(u.created_at).toLocaleDateString() %></td>
            <td>
              <div class="actions">
                <button class="btn-edit" onclick='openEditModal(<%= JSON.stringify(u) %>)'>Edit</button>
                <button class="btn-delete" onclick="deleteUser(<%= u.id %>)">Delete</button>
              </div>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </div>

  <!-- Modal Create User -->
  <div id="createModal" class="modal">
    <div class="modal-content">
      <h2>Create New User</h2>
      <form id="createForm">
        <div class="form-group">
          <label for="create_username">Username</label>
          <input type="text" id="create_username" name="username" required>
        </div>
        <div class="form-group">
          <label for="create_email">Email</label>
          <input type="email" id="create_email" name="email" required>
        </div>
        <div class="form-group">
          <label for="create_password">Password</label>
          <input type="password" id="create_password" name="password" required>
        </div>
        <div class="form-group">
          <label for="create_role">Role</label>
          <select id="create_role" name="role" required>
            <option value="user">User</option>
            <option value="admin">Admin</option>
          </select>
        </div>
        <div class="form-actions">
          <button type="button" class="btn-cancel" onclick="closeCreateModal()">Cancel</button>
          <button type="submit" class="btn-primary">Create</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Modal Edit User -->
  <div id="editModal" class="modal">
    <div class="modal-content">
      <h2>Edit User</h2>
      <form id="editForm">
        <input type="hidden" id="edit_id" name="id">
        <div class="form-group">
          <label for="edit_username">Username</label>
          <input type="text" id="edit_username" name="username" required>
        </div>
        <div class="form-group">
          <label for="edit_email">Email</label>
          <input type="email" id="edit_email" name="email" required>
        </div>
        <div class="form-group">
          <label for="edit_password">Password (leave empty to keep current)</label>
          <input type="password" id="edit_password" name="password">
        </div>
        <div class="form-group">
          <label for="edit_role">Role</label>
          <select id="edit_role" name="role" required>
            <option value="user">User</option>
            <option value="admin">Admin</option>
          </select>
        </div>
        <div class="form-actions">
          <button type="button" class="btn-cancel" onclick="closeEditModal()">Cancel</button>
          <button type="submit" class="btn-primary">Update</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    function showMessage(message, type) {
      const messageDiv = document.getElementById('message');
      messageDiv.innerHTML = `<div class="message ${type}">${message}</div>`;
      setTimeout(() => {
        messageDiv.innerHTML = '';
      }, 3000);
    }

    function openCreateModal() {
      document.getElementById('createModal').classList.add('active');
    }

    function closeCreateModal() {
      document.getElementById('createModal').classList.remove('active');
      document.getElementById('createForm').reset();
    }

    function openEditModal(user) {
      document.getElementById('edit_id').value = user.id;
      document.getElementById('edit_username').value = user.username;
      document.getElementById('edit_email').value = user.email;
      document.getElementById('edit_role').value = user.role;
      document.getElementById('editModal').classList.add('active');
    }

    function closeEditModal() {
      document.getElementById('editModal').classList.remove('active');
      document.getElementById('editForm').reset();
    }

    document.getElementById('createForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      
      try {
        const response = await fetch('/api/users/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage('User created successfully!', 'success');
          closeCreateModal();
          setTimeout(() => location.reload(), 1000);
        } else {
          showMessage(result.message, 'error');
        }
      } catch (error) {
        showMessage('Failed to create user!', 'error');
      }
    });

    document.getElementById('editForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      const id = data.id;
      delete data.id;
      
      try {
        const response = await fetch(`/api/users/update/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage('User updated successfully!', 'success');
          closeEditModal();
          setTimeout(() => location.reload(), 1000);
        } else {
          showMessage(result.message, 'error');
        }
      } catch (error) {
        showMessage('Failed to update user!', 'error');
      }
    });

    async function deleteUser(id) {
      if (!confirm('Are you sure you want to delete this user?')) return;
      
      try {
        const response = await fetch(`/api/users/delete/${id}`, {
          method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage('User deleted successfully!', 'success');
          setTimeout(() => location.reload(), 1000);
        } else {
          showMessage(result.message, 'error');
        }
      } catch (error) {
        showMessage('Failed to delete user!', 'error');
      }
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
      const createModal = document.getElementById('createModal');
      const editModal = document.getElementById('editModal');
      if (event.target === createModal) {
        closeCreateModal();
      }
      if (event.target === editModal) {
        closeEditModal();
      }
    }
  </script>
</body>
</html>